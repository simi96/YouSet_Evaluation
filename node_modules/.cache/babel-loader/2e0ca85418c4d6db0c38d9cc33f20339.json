{"ast":null,"code":"var _jsxFileName = \"/Users/simrit/Desktop/technical-assignment/src/components/table.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { FormComponent } from './form';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TableComponent = () => {\n  _s();\n\n  const [rowSelected, updateRowSelected] = useState({});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(rowSelected).length != 0 && /*#__PURE__*/_jsxDEV(FormComponent, {\n      rowInfo: rowSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TableComponent, \"UYfMPMIwAX8flz7/glAT92wnMKU=\");\n\n_c = TableComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableComponent\");","map":{"version":3,"names":["React","useState","FormComponent","TableComponent","rowSelected","updateRowSelected","Object","keys","length"],"sources":["/Users/simrit/Desktop/technical-assignment/src/components/table.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nimport { rows, columns } from '../constants';\nimport { FormComponent } from './form'\nimport './styles.css';\n\nexport const TableComponent : React.FC = () => {\n\n  const [rowSelected, updateRowSelected] = useState<object>({})\n  return (\n    <>\n    {/* {Object.keys(rowSelected).length == 0 && <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {columns.map(item => (\n                <TableCell align = \"center\">{item.headerName}</TableCell>\n            ))\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody className = 'pointer'>\n          {rows.map((row) => (\n            <TableRow\n              key={row.id}\n              onClick = {() => updateRowSelected(row)}\n              selected = {true}\n              hover = {true}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.col1}\n              </TableCell>\n              <TableCell align=\"center\">{row.col2}</TableCell>\n              <TableCell align=\"center\">{row.col3}</TableCell>\n              <TableCell align=\"center\">{row.col4}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>} */}\n\n      {Object.keys(rowSelected).length != 0 &&  \n      <FormComponent rowInfo = {rowSelected}/>}\n      </>\n  );\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAUA,SAASC,aAAT,QAA8B,QAA9B;AACA,OAAO,cAAP;;;AAEA,OAAO,MAAMC,cAAyB,GAAG,MAAM;EAAA;;EAE7C,MAAM,CAACC,WAAD,EAAcC,iBAAd,IAAmCJ,QAAQ,CAAS,EAAT,CAAjD;EACA,oBACE;IAAA,UA+BGK,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,MAAzB,IAAmC,CAAnC,iBACD,QAAC,aAAD;MAAe,OAAO,EAAIJ;IAA1B;MAAA;MAAA;MAAA;IAAA;EAhCF,iBADF;AAoCD,CAvCM;;GAAMD,c;;KAAAA,c"},"metadata":{},"sourceType":"module"}